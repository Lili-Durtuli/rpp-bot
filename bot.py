# bot.py
# Python 3.10+
# pip install python-telegram-bot==21.4
# export BOT_TOKEN = 8433955587:AAEWYkdVGjcY59JV6qly2cpPPxgVt5eMwUU
import os
from dataclasses import dataclass
from typing import List, Dict, Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç—ã ==========
DISCLAIMER = (
    "‚ö†Ô∏è –≠—Ç–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å (EAT-26 –∏ SCOFF), –∞ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ–∑. "
    "–ï—Å–ª–∏ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç –ø–∏—Ç–∞–Ω–∏–µ, –≤–µ—Å, –æ–±—Ä–∞–∑ —Ç–µ–ª–∞ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É/—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –†–ü–ü."
)

SUPPORT_HINT = (
    "–ï—Å–ª–∏ –≤–∞–º —Ç—Ä—É–¥–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±–ª–∏–∑–∫–∏–º, –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –≥–æ—Ä—è—á–∏–º –ª–∏–Ω–∏—è–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ "
    "–∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
)

# ========== –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö ==========
@dataclass
class EatOption:
    text: str
    code: str  # –æ–¥–∏–Ω –∏–∑: "ALWAYS","USUALLY","OFTEN","SOMETIMES","RARELY","NEVER"

@dataclass
class EatQuestion:
    text: str
    reverse: bool = False  # —Ç–æ–ª—å–∫–æ –¥–ª—è –ø.26

@dataclass
class ScoffQuestion:
    text: str

# –®–∫–∞–ª–∞ EAT-26 (—Ä—É—Å—Å–∫–∞—è): –í—Å–µ–≥–¥–∞, –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –î–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ, –ò–Ω–æ–≥–¥–∞, –†–µ–¥–∫–æ, –ù–∏–∫–æ–≥–¥–∞
# –ü—Ä—è–º–æ–π —Å—á—ë—Ç (–ø—É–Ω–∫—Ç—ã 1‚Äì25): 3,2,1,0,0,0
# –û–±—Ä–∞—Ç–Ω—ã–π —Å—á—ë—Ç (—Ç–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç 26): 0,0,0,1,2,3
EAT_OPTIONS: List[EatOption] = [
    EatOption("–í—Å–µ–≥–¥–∞", "ALWAYS"),
    EatOption("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ", "USUALLY"),
    EatOption("–î–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ", "OFTEN"),
    EatOption("–ò–Ω–æ–≥–¥–∞", "SOMETIMES"),
    EatOption("–†–µ–¥–∫–æ", "RARELY"),
    EatOption("–ù–∏–∫–æ–≥–¥–∞", "NEVER"),
]

DIRECT_SCORES = {"ALWAYS": 3, "USUALLY": 2, "OFTEN": 1, "SOMETIMES": 0, "RARELY": 0, "NEVER": 0}
REVERSE_SCORES = {"ALWAYS": 0, "USUALLY": 0, "OFTEN": 0, "SOMETIMES": 1, "RARELY": 2, "NEVER": 3}

# –í–æ–ø—Ä–æ—Å—ã EAT-26 –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞, –ø.26 ‚Äî –æ–±—Ä–∞—Ç–Ω—ã–π —Å—á—ë—Ç
EAT_QUESTIONS: List[EatQuestion] = [
    EatQuestion("–ú–µ–Ω—è –ø—É–≥–∞–µ—Ç –º—ã—Å–ª—å –æ —Ç–æ–º, —á—Ç–æ —è —Ä–∞—Å–ø–æ–ª–Ω–µ—é"),
    EatQuestion("–Ø –≤–æ–∑–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –æ—Ç –µ–¥—ã, –±—É–¥—É—á–∏ –≥–æ–ª–æ–¥–Ω—ã–º(–æ–π)"),
    EatQuestion("–Ø –Ω–∞—Ö–æ–∂—É, —á—Ç–æ —è –ø–æ–≥–ª–æ—â—ë–Ω(–Ω–∞) –º—ã—Å–ª—è–º–∏ –æ –µ–¥–µ"),
    EatQuestion("–£ –º–µ–Ω—è –±—ã–≤–∞—é—Ç –ø—Ä–∏—Å—Ç—É–ø—ã –±–µ—Å–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è –ø–∏—â–∏, –≤–æ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —è –Ω–µ –º–æ–≥—É —Å–µ–±—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"),
    EatQuestion("–Ø –¥–µ–ª—é —Å–≤–æ—é –µ–¥—É –Ω–∞ –º–µ–ª–∫–∏–µ –∫—É—Å–æ—á–∫–∏"),
    EatQuestion("–Ø –∑–Ω–∞—é, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –≤ –ø–∏—â–µ, –∫–æ—Ç–æ—Ä—É—é —è –µ–º"),
    EatQuestion("–Ø –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –æ—Ç –µ–¥—ã, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –º–Ω–æ–≥–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (—Ö–ª–µ–±, —Ä–∏—Å, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å)"),
    EatQuestion("–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á–ª–∏ –±—ã, —á—Ç–æ–±—ã —è –±–æ–ª—å—à–µ –µ–ª(–∞)"),
    EatQuestion("–ú–µ–Ω—è —Ä–≤—ë—Ç –ø–æ—Å–ª–µ –µ–¥—ã"),
    EatQuestion("–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –æ–±–æ—Å—Ç—Ä—ë–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –ø–æ—Å–ª–µ –µ–¥—ã"),
    EatQuestion("–Ø –æ–∑–∞–±–æ—á–µ–Ω(–∞) –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ—Ö—É–¥–µ—Ç—å"),
    EatQuestion("–ö–æ–≥–¥–∞ —è –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º, —Ç–æ –¥—É–º–∞—é, —á—Ç–æ —è —Å–∂–∏–≥–∞—é –∫–∞–ª–æ—Ä–∏–∏"),
    EatQuestion("–û–∫—Ä—É–∂–∞—é—â–∏–µ —Å—á–∏—Ç–∞—é—Ç –º–µ–Ω—è —Å–ª–∏—à–∫–æ–º —Ö—É–¥—ã–º(–æ–π)"),
    EatQuestion("–Ø –æ–∑–∞–±–æ—á–µ–Ω(–∞) –º—ã—Å–ª—è–º–∏ –æ–± –∏–º–µ—é—â–∏–º—Å—è –≤ –º–æ—ë–º —Ç–µ–ª–µ –∂–∏—Ä–µ"),
    EatQuestion("–ù–∞ —Ç–æ, —á—Ç–æ–±—ã —Å—ä–µ—Å—Ç—å –µ–¥—É, —É –º–µ–Ω—è —É—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º —É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π"),
    EatQuestion("–Ø –≤–æ–∑–¥–µ—Ä–∂–∏–≤–∞—é—Å—å –æ—Ç –µ–¥—ã, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å–∞—Ö–∞—Ä"),
    EatQuestion("–Ø –µ–º –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã"),
    EatQuestion("–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –µ–¥–æ–π, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç –º–æ—é –∂–∏–∑–Ω—å"),
    EatQuestion("–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –µ–¥–æ–π"),
    EatQuestion("–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –º–µ–Ω—è –¥–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–ª(–∞)"),
    EatQuestion("–Ø —Ç—Ä–∞—á—É —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –µ–¥–æ–π"),
    EatQuestion("–Ø —á—É–≤—Å—Ç–≤—É—é –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–µ–º —Å–ª–∞–¥–æ—Å—Ç–∏"),
    EatQuestion("–Ø —Å–æ–±–ª—é–¥–∞—é –¥–∏–µ—Ç—É"),
    EatQuestion("–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –æ—â—É—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∂–µ–ª—É–¥–∫–∞"),
    EatQuestion("–ü–æ—Å–ª–µ –µ–¥—ã —É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –µ—ë –≤—ã—Ä–≤–∞—Ç—å"),
    EatQuestion("–Ø –ø–æ–ª—É—á–∞—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ–±—É—é –Ω–æ–≤—ã–µ –∏ –≤–∫—É—Å–Ω—ã–µ –±–ª—é–¥–∞", reverse=True),
]

SCOFF_QUESTIONS: List[ScoffQuestion] = [
    ScoffQuestion("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞ —Å–ª—É—á–∞–ª–æ—Å—å –ª–∏ —É –≤–∞—Å –±–µ–∑—É–¥–µ—Ä–∂–Ω–æ–µ –æ–±—ä–µ–¥–∞–Ω–∏–µ —Å —á—É–≤—Å—Ç–≤–æ–º, —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—Ç–µ?"),
    ScoffQuestion("–ü—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞ —Ä–≤–æ—Ç—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞/—Ñ–∏–≥—É—Ä—ã?"),
    ScoffQuestion("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞ –º–æ—á–µ–≥–æ–Ω–Ω—ã–µ, —Å–ª–∞–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ ¬´—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ¬ª –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞/—Ñ–∏–≥—É—Ä—ã?"),
    ScoffQuestion("–ó–∞–Ω–∏–º–∞–ª–∏—Å—å –ª–∏ –≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤ —Ñ–∏–∑–Ω–∞–≥—Ä—É–∑–∫–æ–π >60 –º–∏–Ω—É—Ç –∑–∞ –¥–µ–Ω—å —Ä–∞–¥–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Å–∞/—Ñ–∏–≥—É—Ä—ã?"),
    ScoffQuestion("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª–≥–æ–¥–∞ –≤—ã —Å–±—Ä–æ—Å–∏–ª–∏ 9 –∫–≥ –∏–ª–∏ –±–æ–ª—å—à–µ?"),
]

# ========== –ö–ª—é—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ==========
PHASE_KEY = "phase"  # "intro"|"eat"|"scoff"|"done"
EAT_IDX_KEY = "eat_idx"
SCOFF_IDX_KEY = "scoff_idx"
EAT_SCORE_KEY = "eat_score"
EAT_ANS_KEY = "eat_answers"     # —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ ("ALWAYS",...)
SCOFF_ANS_KEY = "scoff_answers" # —Å–ø–∏—Å–æ–∫ bool

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def eat_score_for(code: str, reverse: bool) -> int:
    return (REVERSE_SCORES if reverse else DIRECT_SCORES)[code]

def eat_keyboard(q_index: int) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(opt.text, callback_data=f"eat:{q_index}:{opt.code}")] for opt in EAT_OPTIONS]
    return InlineKeyboardMarkup(rows)

def scoff_keyboard(q_index: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data=f"scoff:{q_index}:yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"scoff:{q_index}:no")]
    ])

async def send_eat_question(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int):
    q = EAT_QUESTIONS[idx]
    text = f"EAT-26 ‚Äî –≤–æ–ø—Ä–æ—Å {idx+1}/{len(EAT_QUESTIONS)}\n\n{q.text}"
    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=eat_keyboard(idx))
    else:
        await update.effective_chat.send_message(text=text, reply_markup=eat_keyboard(idx))

async def send_scoff_question(update: Update, context: ContextTypes.DEFAULT_TYPE, idx: int):
    q = SCOFF_QUESTIONS[idx]
    text = f"SCOFF ‚Äî –≤–æ–ø—Ä–æ—Å {idx+1}/{len(SCOFF_QUESTIONS)}\n\n{q.text}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª."
    if update.callback_query:
        await update.callback_query.edit_message_text(text=text, reply_markup=scoff_keyboard(idx))
    else:
        await update.effective_chat.send_message(text=text, reply_markup=scoff_keyboard(idx))

def interpretation_text(eat_total: int, scoff_yes: int) -> str:
    lines = []
    # EAT-26
    if eat_total >= 20:
        lines.append("üìä **EAT-26:** ‚â• 20 ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.")
    else:
        lines.append("üìä **EAT-26:** < 20 ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —à–∫–∞–ª–µ EAT-26 –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.")
    # SCOFF
    if scoff_yes >= 4:
        lines.append("üß© **SCOFF:** 4‚Äì5 ¬´–¥–∞¬ª ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫ –ø—Ä–∏—ë–º—É –ø–∏—â–∏.")
    elif scoff_yes >= 2:
        lines.append("üß© **SCOFF:** ‚â• 2 ¬´–¥–∞¬ª ‚Äî –µ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
    else:
        lines.append("üß© **SCOFF:** 0‚Äì1 ¬´–¥–∞¬ª ‚Äî –ø–æ –æ–ø—Ä–æ—Å–Ω–∏–∫—É –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.")
    # –ò—Ç–æ–≥
    if (eat_total >= 20) or (scoff_yes >= 2):
        lines.append("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±—Å—É–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –†–ü–ü/–≤—Ä–∞—á–æ–º.")
    return "\n".join(lines)

def answers_preview(eat_ans: List[str], scoff_ans: List[bool]) -> str:
    # EAT
    eat_lines = []
    for i, code in enumerate(eat_ans):
        opt_text = next((o.text for o in EAT_OPTIONS if o.code == code), code)
        eat_lines.append(f"{i+1}. {opt_text}")
    # SCOFF
    scoff_lines = []
    for i, val in enumerate(scoff_ans):
        scoff_lines.append(f"{i+1}. {'–î–∞' if val else '–ù–µ—Ç'}")
    return (
        "*–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã (EAT-26):*\n" + "\n".join(eat_lines) +
        "\n\n*–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã (SCOFF):*\n" + "\n".join(scoff_lines)
    )

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[PHASE_KEY] = "intro"
    context.user_data[EAT_IDX_KEY] = 0
    context.user_data[SCOFF_IDX_KEY] = 0
    context.user_data[EAT_SCORE_KEY] = 0
    context.user_data[EAT_ANS_KEY] = []
    context.user_data[SCOFF_ANS_KEY] = []

    intro = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≤–µ–¥—É –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ —à–∫–∞–ª–∞–º EAT-26 –∏ SCOFF.\n\n"
        f"{DISCLAIMER}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å."
    )
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="begin")]])
    await update.effective_chat.send_message(intro, reply_markup=kb)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å"
    )

async def cmd_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, context)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    # –ù–∞—á–∞–ª–æ
    if data == "begin":
        context.user_data[PHASE_KEY] = "eat"
        await send_eat_question(update, context, 0)
        return

    # –û—Ç–≤–µ—Ç—ã EAT
    if data.startswith("eat:"):
        _, idx_str, code = data.split(":")
        idx = int(idx_str)
        question = EAT_QUESTIONS[idx]
        # –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
        eat_ans: List[str] = context.user_data[EAT_ANS_KEY]
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–∞–¥ —ç—Ç–æ –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
        if len(eat_ans) == idx:
            eat_ans.append(code)
        else:
            if idx < len(eat_ans):
                eat_ans[idx] = code
            else:
                # –∑–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏, –µ—Å–ª–∏ —á—Ç–æ
                while len(eat_ans) < idx:
                    eat_ans.append("SOMETIMES")
                eat_ans.append(code)

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–ª
        delta = eat_score_for(code, question.reverse)
        context.user_data[EAT_SCORE_KEY] = int(context.user_data[EAT_SCORE_KEY]) + delta

        next_idx = idx + 1
        if next_idx < len(EAT_QUESTIONS):
            await send_eat_question(update, context, next_idx)
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ SCOFF
            context.user_data[PHASE_KEY] = "scoff"
            await send_scoff_question(update, context, 0)
        return

    # –û—Ç–≤–µ—Ç—ã SCOFF
    if data.startswith("scoff:"):
        _, idx_str, yn = data.split(":")
        idx = int(idx_str)
        val = (yn == "yes")
        scoff_ans: List[bool] = context.user_data[SCOFF_ANS_KEY]
        if len(scoff_ans) == idx:
            scoff_ans.append(val)
        else:
            if idx < len(scoff_ans):
                scoff_ans[idx] = val
            else:
                while len(scoff_ans) < idx:
                    scoff_ans.append(False)
                scoff_ans.append(val)

        next_idx = idx + 1
        if next_idx < len(SCOFF_QUESTIONS):
            await send_scoff_question(update, context, next_idx)
        else:
            # –ò—Ç–æ–≥–∏
            total = int(context.user_data[EAT_SCORE_KEY])
            yes_count = sum(1 for v in scoff_ans if v)

            summary = (
                "‚úÖ –°–∫—Ä–∏–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n"
                f"–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–ª **EAT-26:** *{total}*\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ¬´–¥–∞¬ª –ø–æ **SCOFF:** *{yes_count}*\n\n"
                f"{interpretation_text(total, yes_count)}\n\n"
                f"{DISCLAIMER}\n\n"
                f"{SUPPORT_HINT}\n\n"
                f"{answers_preview(context.user_data[EAT_ANS_KEY], scoff_ans)}"
            )
            await q.edit_message_text(summary, parse_mode="Markdown")

            # –°–±—Ä–æ—Å
            context.user_data.clear()
        return

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
def main():
    token = os.getenv("8433955587:AAGx8f69pGidInkxvNk_I3FOb8Wu2UTqRkM"
    if not token:
        raise RuntimeError("–ó–∞–¥–∞–π—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\nexport BOT_TOKEN=123456:ABC...")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("restart", cmd_restart))
    app.add_handler(CallbackQueryHandler(on_callback))

    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
